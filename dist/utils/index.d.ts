import { createFailFromError, createFailValidation, createSuccessValidation, validate, Validate, validateEmail, validatePassword } from "./validation";
import { setObjKey } from "./object";
import { getEnvArr, getEnvJson, getEnvNum, getEnvStr, getEnvBool } from "./config";
import { diffMsTime, getMsTime } from "./mstime";
declare const _default: {
    validate: typeof validate;
    validateEmail: typeof validateEmail;
    validatePassword: typeof validatePassword;
    createFailFromError: typeof createFailFromError;
    createFailValidation: typeof createFailValidation;
    createSuccessValidation: typeof createSuccessValidation;
    Validate: typeof Validate;
    formatDateToDisplay: (date: Date, format?: string) => string;
    compareDateOnly: (date1: Date, date2: Date) => number;
    convertStringToDate: (data: string, format?: string) => Date;
    MINUTE_DATE_DISPLAY_FORMAT: string;
    DATETIME_DISPLAY_FORMAT: string;
    DATE_DISPLAY_FORMAT: string;
    TIME_DISPLAY_FORMAT: string;
    isNullOrUndefined: (input: any) => boolean;
    countDaysOfAYear: (year: number) => number;
    getStartOfDate: (date: Date) => Date;
    getEndOfDate: (date: Date) => Date;
    countDayBetween: (dateFrom: Date, dateTo: Date) => number;
    isWeekend: (date: Date) => boolean;
    getStartOfWeek: (date: Date) => Date;
    getEndOfWeek: (date: Date) => Date;
    getStartOfMonth: (date: Date) => Date;
    getEndOfMonth: (date: Date) => Date;
    round: (input: number, scale?: number) => number;
    roundInt: (input: number, scale?: number) => number;
    removeDuplicateObj: (arr: any[], fieldName: any) => any[];
    setObjKey: typeof setObjKey;
    getEnvArr: typeof getEnvArr;
    getEnvNum: typeof getEnvNum;
    getEnvStr: typeof getEnvStr;
    getEnvJson: typeof getEnvJson;
    getEnvBool: typeof getEnvBool;
    diffMsTime: typeof diffMsTime;
    getMsTime: typeof getMsTime;
    convertISO8601StringToDate: (data: string) => Date;
    formatISO8601StringToDate: (data: Date) => string;
};
export default _default;
